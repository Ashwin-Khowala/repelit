# ---

# # kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.8.1/deploy/static/provider/cloud/deploy.yaml
# # Source: ingress-nginx/templates/controller-serviceaccount.yaml
# apiVersion: v1
# kind: ServiceAccount
# metadata:
#   labels:
#     helm.sh/chart: ingress-nginx-4.9.1
#     app.kubernetes.io/name: ingress-nginx
#     app.kubernetes.io/instance: ingress-nginx
#     app.kubernetes.io/version: "1.9.6"
#     app.kubernetes.io/part-of: ingress-nginx
#     app.kubernetes.io/managed-by: Helm
#     app.kubernetes.io/component: controller
#   name: ingress-nginx
#   namespace: ingress-nginx
# automountServiceAccountToken: true
# ---
# # Source: ingress-nginx/templates/controller-configmap.yaml
# apiVersion: v1
# kind: ConfigMap
# metadata:
#   labels:
#     helm.sh/chart: ingress-nginx-4.9.1
#     app.kubernetes.io/name: ingress-nginx
#     app.kubernetes.io/instance: ingress-nginx
#     app.kubernetes.io/version: "1.9.6"
#     app.kubernetes.io/part-of: ingress-nginx
#     app.kubernetes.io/managed-by: Helm
#     app.kubernetes.io/component: controller
#   name: ingress-nginx-controller
#   namespace: ingress-nginx
# data:
#   allow-snippet-annotations: "false"
#   log-format-escape-json: "true"
#   log-format-upstream: '{"time":"$time_iso8601","remote_addr":"$remote_addr","proxy_protocol_addr":"$proxy_protocol_addr","proxy_protocol_port":"$proxy_protocol_port","x_forward_for":"$proxy_add_x_forwarded_for","remote_user":"$remote_user","host":"$host","request_method":"$request_method","request_uri":"$request_uri","server_protocol":"$server_protocol","status":$status,"request_time":$request_time,"request_length":$request_length,"bytes_sent":$bytes_sent,"upstream_name":"$proxy_upstream_name","upstream_addr":"$upstream_addr","upstream_uri":"$uri","upstream_response_length":$upstream_response_length,"upstream_response_time":$upstream_response_time,"upstream_status":$upstream_status,"http_referrer":"$http_referer","http_user_agent":"$http_user_agent","http_cookie":"$http_cookie","http_device_id":"$http_x_device_id","http_customer_id":"$http_x_customer_id"}'
# ---
# # Source: ingress-nginx/templates/clusterrole.yaml
# apiVersion: rbac.authorization.k8s.io/v1
# kind: ClusterRole
# metadata:
#   labels:
#     helm.sh/chart: ingress-nginx-4.9.1
#     app.kubernetes.io/name: ingress-nginx
#     app.kubernetes.io/instance: ingress-nginx
#     app.kubernetes.io/version: "1.9.6"
#     app.kubernetes.io/part-of: ingress-nginx
#     app.kubernetes.io/managed-by: Helm
#   name: ingress-nginx
# rules:
#   - apiGroups:
#       - ""
#     resources:
#       - configmaps
#       - endpoints
#       - nodes
#       - pods
#       - secrets
#       - namespaces
#     verbs:
#       - list
#       - watch
#   - apiGroups:
#       - coordination.k8s.io
#     resources:
#       - leases
#     verbs:
#       - list
#       - watch
#   - apiGroups:
#       - ""
#     resources:
#       - nodes
#     verbs:
#       - get
#   - apiGroups:
#       - ""
#     resources:
#       - services
#     verbs:
#       - get
#       - list
#       - watch
#   - apiGroups:
#       - networking.k8s.io
#     resources:
#       - ingresses
#     verbs:
#       - get
#       - list
#       - watch
#   - apiGroups:
#       - ""
#     resources:
#       - events
#     verbs:
#       - create
#       - patch
#   - apiGroups:
#       - networking.k8s.io
#     resources:
#       - ingresses/status
#     verbs:
#       - update
#   - apiGroups:
#       - networking.k8s.io
#     resources:
#       - ingressclasses
#     verbs:
#       - get
#       - list
#       - watch
#   - apiGroups:
#       - discovery.k8s.io
#     resources:
#       - endpointslices
#     verbs:
#       - list
#       - watch
#       - get
# ---
# # Source: ingress-nginx/templates/clusterrolebinding.yaml
# apiVersion: rbac.authorization.k8s.io/v1
# kind: ClusterRoleBinding
# metadata:
#   labels:
#     helm.sh/chart: ingress-nginx-4.9.1
#     app.kubernetes.io/name: ingress-nginx
#     app.kubernetes.io/instance: ingress-nginx
#     app.kubernetes.io/version: "1.9.6"
#     app.kubernetes.io/part-of: ingress-nginx
#     app.kubernetes.io/managed-by: Helm
#   name: ingress-nginx
# roleRef:
#   apiGroup: rbac.authorization.k8s.io
#   kind: ClusterRole
#   name: ingress-nginx
# subjects:
#   - kind: ServiceAccount
#     name: ingress-nginx
#     namespace: ingress-nginx
# ---
# # Source: ingress-nginx/templates/controller-role.yaml
# apiVersion: rbac.authorization.k8s.io/v1
# kind: Role
# metadata:
#   labels:
#     helm.sh/chart: ingress-nginx-4.9.1
#     app.kubernetes.io/name: ingress-nginx
#     app.kubernetes.io/instance: ingress-nginx
#     app.kubernetes.io/version: "1.9.6"
#     app.kubernetes.io/part-of: ingress-nginx
#     app.kubernetes.io/managed-by: Helm
#     app.kubernetes.io/component: controller
#   name: ingress-nginx
#   namespace: ingress-nginx
# rules:
#   - apiGroups:
#       - ""
#     resources:
#       - namespaces
#     verbs:
#       - get
#   - apiGroups:
#       - ""
#     resources:
#       - configmaps
#       - pods
#       - secrets
#       - endpoints
#     verbs:
#       - get
#       - list
#       - watch
#   - apiGroups:
#       - ""
#     resources:
#       - services
#     verbs:
#       - get
#       - list
#       - watch
#   - apiGroups:
#       - networking.k8s.io
#     resources:
#       - ingresses
#     verbs:
#       - get
#       - list
#       - watch
#   # Omit Ingress status permissions if `--update-status` is disabled.
#   - apiGroups:
#       - networking.k8s.io
#     resources:
#       - ingresses/status
#     verbs:
#       - update
#   - apiGroups:
#       - networking.k8s.io
#     resources:
#       - ingressclasses
#     verbs:
#       - get
#       - list
#       - watch
#   - apiGroups:
#       - coordination.k8s.io
#     resources:
#       - leases
#     resourceNames:
#       - ingress-nginx-leader
#     verbs:
#       - get
#       - update
#   - apiGroups:
#       - coordination.k8s.io
#     resources:
#       - leases
#     verbs:
#       - create
#   - apiGroups:
#       - ""
#     resources:
#       - events
#     verbs:
#       - create
#       - patch
#   - apiGroups:
#       - discovery.k8s.io
#     resources:
#       - endpointslices
#     verbs:
#       - list
#       - watch
#       - get
# ---
# # Source: ingress-nginx/templates/controller-rolebinding.yaml
# apiVersion: rbac.authorization.k8s.io/v1
# kind: RoleBinding
# metadata:
#   labels:
#     helm.sh/chart: ingress-nginx-4.9.1
#     app.kubernetes.io/name: ingress-nginx
#     app.kubernetes.io/instance: ingress-nginx
#     app.kubernetes.io/version: "1.9.6"
#     app.kubernetes.io/part-of: ingress-nginx
#     app.kubernetes.io/managed-by: Helm
#     app.kubernetes.io/component: controller
#   name: ingress-nginx
#   namespace: ingress-nginx
# roleRef:
#   apiGroup: rbac.authorization.k8s.io
#   kind: Role
#   name: ingress-nginx
# subjects:
#   - kind: ServiceAccount
#     name: ingress-nginx
#     namespace: ingress-nginx
# ---
# # Source: ingress-nginx/templates/controller-service-webhook.yaml
# apiVersion: v1
# kind: Service
# metadata:
#   labels:
#     helm.sh/chart: ingress-nginx-4.9.1
#     app.kubernetes.io/name: ingress-nginx
#     app.kubernetes.io/instance: ingress-nginx
#     app.kubernetes.io/version: "1.9.6"
#     app.kubernetes.io/part-of: ingress-nginx
#     app.kubernetes.io/managed-by: Helm
#     app.kubernetes.io/component: controller
#   name: ingress-nginx-controller-admission
#   namespace: ingress-nginx
# spec:
#   type: ClusterIP
#   ports:
#     - name: https-webhook
#       port: 443
#       targetPort: webhook
#       appProtocol: https
#   selector:
#     app.kubernetes.io/name: ingress-nginx
#     app.kubernetes.io/instance: ingress-nginx
#     app.kubernetes.io/component: controller
# ---
# # Source: ingress-nginx/templates/controller-service.yaml
# apiVersion: v1
# kind: Service
# metadata:
#   annotations:
#   labels:
#     helm.sh/chart: ingress-nginx-4.9.1
#     app.kubernetes.io/name: ingress-nginx
#     app.kubernetes.io/instance: ingress-nginx
#     app.kubernetes.io/version: "1.9.6"
#     app.kubernetes.io/part-of: ingress-nginx
#     app.kubernetes.io/managed-by: Helm
#     app.kubernetes.io/component: controller
#   name: ingress-nginx-controller
#   namespace: ingress-nginx
# spec:
#   type: LoadBalancer
#   ipFamilyPolicy: SingleStack
#   ipFamilies: 
#     - IPv4
#   ports:
#     - name: http
#       port: 80
#       protocol: TCP
#       targetPort: http
#       appProtocol: http
#     - name: https
#       port: 443
#       protocol: TCP
#       targetPort: https
#       appProtocol: https
#   selector:
#     app.kubernetes.io/name: ingress-nginx
#     app.kubernetes.io/instance: ingress-nginx
#     app.kubernetes.io/component: controller
# ---
# # Source: ingress-nginx/templates/controller-deployment.yaml
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   labels:
#     helm.sh/chart: ingress-nginx-4.9.1
#     app.kubernetes.io/name: ingress-nginx
#     app.kubernetes.io/instance: ingress-nginx
#     app.kubernetes.io/version: "1.9.6"
#     app.kubernetes.io/part-of: ingress-nginx
#     app.kubernetes.io/managed-by: Helm
#     app.kubernetes.io/component: controller
#   name: ingress-nginx-controller
#   namespace: ingress-nginx
# spec:
#   selector:
#     matchLabels:
#       app.kubernetes.io/name: ingress-nginx
#       app.kubernetes.io/instance: ingress-nginx
#       app.kubernetes.io/component: controller
#   replicas: 1
#   revisionHistoryLimit: 10
#   minReadySeconds: 0
#   template:
#     metadata:
#       labels:
#         helm.sh/chart: ingress-nginx-4.9.1
#         app.kubernetes.io/name: ingress-nginx
#         app.kubernetes.io/instance: ingress-nginx
#         app.kubernetes.io/version: "1.9.6"
#         app.kubernetes.io/part-of: ingress-nginx
#         app.kubernetes.io/managed-by: Helm
#         app.kubernetes.io/component: controller
#     spec:
#       dnsPolicy: ClusterFirst
#       containers:
#         - name: controller
#           image: registry.k8s.io/ingress-nginx/controller:v1.9.6@sha256:1405cc613bd95b2c6edd8b2a152510ae91c7e62aea4698500d23b2145960ab9c
#           imagePullPolicy: IfNotPresent
#           lifecycle: 
#             preStop:
#               exec:
#                 command:
#                 - /wait-shutdown
#           args: 
#             - /nginx-ingress-controller
#             - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
#             - --election-id=ingress-nginx-leader
#             - --controller-class=k8s.io/ingress-nginx
#             - --ingress-class=nginx
#             - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
#             - --validating-webhook=:8443
#             - --validating-webhook-certificate=/usr/local/certificates/cert
#             - --validating-webhook-key=/usr/local/certificates/key
#           securityContext: 
#             runAsNonRoot: true
#             runAsUser: 101
#             allowPrivilegeEscalation: false
#             seccompProfile: 
#               type: RuntimeDefault
#             capabilities:
#               drop:
#               - ALL
#               add:
#               - NET_BIND_SERVICE
#             readOnlyRootFilesystem: false
#           env:
#             - name: POD_NAME
#               valueFrom:
#                 fieldRef:
#                   fieldPath: metadata.name
#             - name: POD_NAMESPACE
#               valueFrom:
#                 fieldRef:
#                   fieldPath: metadata.namespace
#             - name: LD_PRELOAD
#               value: /usr/local/lib/libmimalloc.so
#           livenessProbe: 
#             failureThreshold: 5
#             httpGet:
#               path: /healthz
#               port: 10254
#               scheme: HTTP
#             initialDelaySeconds: 10
#             periodSeconds: 10
#             successThreshold: 1
#             timeoutSeconds: 1
#           readinessProbe: 
#             failureThreshold: 3
#             httpGet:
#               path: /healthz
#               port: 10254
#               scheme: HTTP
#             initialDelaySeconds: 10
#             periodSeconds: 10
#             successThreshold: 1
#             timeoutSeconds: 1
#           ports:
#             - name: http
#               containerPort: 80
#               protocol: TCP
#             - name: https
#               containerPort: 443
#               protocol: TCP
#             - name: webhook
#               containerPort: 8443
#               protocol: TCP
#           volumeMounts:
#             - name: webhook-cert
#               mountPath: /usr/local/certificates/
#               readOnly: true
#           resources: 
#             requests:
#               cpu: 100m
#               memory: 90Mi
#       nodeSelector: 
#         kubernetes.io/os: linux
#       serviceAccountName: ingress-nginx
#       terminationGracePeriodSeconds: 300
#       volumes:
#         - name: webhook-cert
#           secret:
#             secretName: ingress-nginx-admission
# ---
# # Source: ingress-nginx/templates/controller-ingressclass.yaml
# # We don't support namespaced ingressClass yet
# # So a ClusterRole and a ClusterRoleBinding is required
# apiVersion: networking.k8s.io/v1
# kind: IngressClass
# metadata:
#   labels:
#     helm.sh/chart: ingress-nginx-4.9.1
#     app.kubernetes.io/name: ingress-nginx
#     app.kubernetes.io/instance: ingress-nginx
#     app.kubernetes.io/version: "1.9.6"
#     app.kubernetes.io/part-of: ingress-nginx
#     app.kubernetes.io/managed-by: Helm
#     app.kubernetes.io/component: controller
#   name: nginx
# spec:
#   controller: k8s.io/ingress-nginx
# ---
# # Source: ingress-nginx/templates/admission-webhooks/validating-webhook.yaml
# # before changing this value, check the required kubernetes version
# # https://kubernetes.io/docs/reference/access-authn-authz/extensible-admission-controllers/#prerequisites
# apiVersion: admissionregistration.k8s.io/v1
# kind: ValidatingWebhookConfiguration
# metadata:
#   annotations:
#   labels:
#     helm.sh/chart: ingress-nginx-4.9.1
#     app.kubernetes.io/name: ingress-nginx
#     app.kubernetes.io/instance: ingress-nginx
#     app.kubernetes.io/version: "1.9.6"
#     app.kubernetes.io/part-of: ingress-nginx
#     app.kubernetes.io/managed-by: Helm
#     app.kubernetes.io/component: admission-webhook
#   name: ingress-nginx-admission
# webhooks:
#   - name: validate.nginx.ingress.kubernetes.io
#     matchPolicy: Equivalent
#     rules:
#       - apiGroups:
#           - networking.k8s.io
#         apiVersions:
#           - v1
#         operations:
#           - CREATE
#           - UPDATE
#         resources:
#           - ingresses
#     failurePolicy: Fail
#     sideEffects: None
#     admissionReviewVersions:
#       - v1
#     clientConfig:
#       service:
#         name: ingress-nginx-controller-admission
#         namespace: ingress-nginx
#         path: /networking/v1/ingresses
# ---
# # Source: ingress-nginx/templates/admission-webhooks/job-patch/serviceaccount.yaml
# apiVersion: v1
# kind: ServiceAccount
# metadata:
#   name: ingress-nginx-admission
#   namespace: ingress-nginx
#   annotations:
#     "helm.sh/hook": pre-install,pre-upgrade,post-install,post-upgrade
#     "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
#   labels:
#     helm.sh/chart: ingress-nginx-4.9.1
#     app.kubernetes.io/name: ingress-nginx
#     app.kubernetes.io/instance: ingress-nginx
#     app.kubernetes.io/version: "1.9.6"
#     app.kubernetes.io/part-of: ingress-nginx
#     app.kubernetes.io/managed-by: Helm
#     app.kubernetes.io/component: admission-webhook
# ---
# # Source: ingress-nginx/templates/admission-webhooks/job-patch/clusterrole.yaml
# apiVersion: rbac.authorization.k8s.io/v1
# kind: ClusterRole
# metadata:
#   name: ingress-nginx-admission
#   annotations:
#     "helm.sh/hook": pre-install,pre-upgrade,post-install,post-upgrade
#     "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
#   labels:
#     helm.sh/chart: ingress-nginx-4.9.1
#     app.kubernetes.io/name: ingress-nginx
#     app.kubernetes.io/instance: ingress-nginx
#     app.kubernetes.io/version: "1.9.6"
#     app.kubernetes.io/part-of: ingress-nginx
#     app.kubernetes.io/managed-by: Helm
#     app.kubernetes.io/component: admission-webhook
# rules:
#   - apiGroups:
#       - admissionregistration.k8s.io
#     resources:
#       - validatingwebhookconfigurations
#     verbs:
#       - get
#       - update
# ---
# # Source: ingress-nginx/templates/admission-webhooks/job-patch/clusterrolebinding.yaml
# apiVersion: rbac.authorization.k8s.io/v1
# kind: ClusterRoleBinding
# metadata:
#   name: ingress-nginx-admission
#   annotations:
#     "helm.sh/hook": pre-install,pre-upgrade,post-install,post-upgrade
#     "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
#   labels:
#     helm.sh/chart: ingress-nginx-4.9.1
#     app.kubernetes.io/name: ingress-nginx
#     app.kubernetes.io/instance: ingress-nginx
#     app.kubernetes.io/version: "1.9.6"
#     app.kubernetes.io/part-of: ingress-nginx
#     app.kubernetes.io/managed-by: Helm
#     app.kubernetes.io/component: admission-webhook
# roleRef:
#   apiGroup: rbac.authorization.k8s.io
#   kind: ClusterRole
#   name: ingress-nginx-admission
# subjects:
#   - kind: ServiceAccount
#     name: ingress-nginx-admission
#     namespace: ingress-nginx
# ---
# # Source: ingress-nginx/templates/admission-webhooks/job-patch/role.yaml
# apiVersion: rbac.authorization.k8s.io/v1
# kind: Role
# metadata:
#   name: ingress-nginx-admission
#   namespace: ingress-nginx
#   annotations:
#     "helm.sh/hook": pre-install,pre-upgrade,post-install,post-upgrade
#     "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
#   labels:
#     helm.sh/chart: ingress-nginx-4.9.1
#     app.kubernetes.io/name: ingress-nginx
#     app.kubernetes.io/instance: ingress-nginx
#     app.kubernetes.io/version: "1.9.6"
#     app.kubernetes.io/part-of: ingress-nginx
#     app.kubernetes.io/managed-by: Helm
#     app.kubernetes.io/component: admission-webhook
# rules:
#   - apiGroups:
#       - ""
#     resources:
#       - secrets
#     verbs:
#       - get
#       - create
# ---
# # Source: ingress-nginx/templates/admission-webhooks/job-patch/rolebinding.yaml
# apiVersion: rbac.authorization.k8s.io/v1
# kind: RoleBinding
# metadata:
#   name: ingress-nginx-admission
#   namespace: ingress-nginx
#   annotations:
#     "helm.sh/hook": pre-install,pre-upgrade,post-install,post-upgrade
#     "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
#   labels:
#     helm.sh/chart: ingress-nginx-4.9.1
#     app.kubernetes.io/name: ingress-nginx
#     app.kubernetes.io/instance: ingress-nginx
#     app.kubernetes.io/version: "1.9.6"
#     app.kubernetes.io/part-of: ingress-nginx
#     app.kubernetes.io/managed-by: Helm
#     app.kubernetes.io/component: admission-webhook
# roleRef:
#   apiGroup: rbac.authorization.k8s.io
#   kind: Role
#   name: ingress-nginx-admission
# subjects:
#   - kind: ServiceAccount
#     name: ingress-nginx-admission
#     namespace: ingress-nginx
# ---
# # Source: ingress-nginx/templates/admission-webhooks/job-patch/job-createSecret.yaml
# apiVersion: batch/v1
# kind: Job
# metadata:
#   name: ingress-nginx-admission-create
#   namespace: ingress-nginx
#   annotations:
#     "helm.sh/hook": pre-install,pre-upgrade
#     "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
#   labels:
#     helm.sh/chart: ingress-nginx-4.9.1
#     app.kubernetes.io/name: ingress-nginx
#     app.kubernetes.io/instance: ingress-nginx
#     app.kubernetes.io/version: "1.9.6"
#     app.kubernetes.io/part-of: ingress-nginx
#     app.kubernetes.io/managed-by: Helm
#     app.kubernetes.io/component: admission-webhook
# spec:
#   template:
#     metadata:
#       name: ingress-nginx-admission-create
#       labels:
#         helm.sh/chart: ingress-nginx-4.9.1
#         app.kubernetes.io/name: ingress-nginx
#         app.kubernetes.io/instance: ingress-nginx
#         app.kubernetes.io/version: "1.9.6"
#         app.kubernetes.io/part-of: ingress-nginx
#         app.kubernetes.io/managed-by: Helm
#         app.kubernetes.io/component: admission-webhook
#     spec:
#       containers:
#         - name: create
#           image: registry.k8s.io/ingress-nginx/kube-webhook-certgen:v20231226-1a7112e06@sha256:25d6a5f11211cc5c3f9f2bf552b585374af287b4debf693cacbe2da47daa5084
#           imagePullPolicy: IfNotPresent
#           args:
#             - create
#             - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
#             - --namespace=$(POD_NAMESPACE)
#             - --secret-name=ingress-nginx-admission
#           env:
#             - name: POD_NAMESPACE
#               valueFrom:
#                 fieldRef:
#                   fieldPath: metadata.namespace
#           securityContext: 
#             allowPrivilegeEscalation: false
#             capabilities:
#               drop:
#               - ALL
#             readOnlyRootFilesystem: true
#             runAsNonRoot: true
#             runAsUser: 65532
#             seccompProfile:
#               type: RuntimeDefault
#       restartPolicy: OnFailure
#       serviceAccountName: ingress-nginx-admission
#       nodeSelector: 
#         kubernetes.io/os: linux
# ---
# # Source: ingress-nginx/templates/admission-webhooks/job-patch/job-patchWebhook.yaml
# apiVersion: batch/v1
# kind: Job
# metadata:
#   name: ingress-nginx-admission-patch
#   namespace: ingress-nginx
#   annotations:
#     "helm.sh/hook": post-install,post-upgrade
#     "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
#   labels:
#     helm.sh/chart: ingress-nginx-4.9.1
#     app.kubernetes.io/name: ingress-nginx
#     app.kubernetes.io/instance: ingress-nginx
#     app.kubernetes.io/version: "1.9.6"
#     app.kubernetes.io/part-of: ingress-nginx
#     app.kubernetes.io/managed-by: Helm
#     app.kubernetes.io/component: admission-webhook
# spec:
#   template:
#     metadata:
#       name: ingress-nginx-admission-patch
#       labels:
#         helm.sh/chart: ingress-nginx-4.9.1
#         app.kubernetes.io/name: ingress-nginx
#         app.kubernetes.io/instance: ingress-nginx
#         app.kubernetes.io/version: "1.9.6"
#         app.kubernetes.io/part-of: ingress-nginx
#         app.kubernetes.io/managed-by: Helm
#         app.kubernetes.io/component: admission-webhook
#     spec:
#       containers:
#         - name: patch
#           image: registry.k8s.io/ingress-nginx/kube-webhook-certgen:v20231226-1a7112e06@sha256:25d6a5f11211cc5c3f9f2bf552b585374af287b4debf693cacbe2da47daa5084
#           imagePullPolicy: IfNotPresent
#           args:
#             - patch
#             - --webhook-name=ingress-nginx-admission
#             - --namespace=$(POD_NAMESPACE)
#             - --patch-mutating=false
#             - --secret-name=ingress-nginx-admission
#             - --patch-failure-policy=Fail
#           env:
#             - name: POD_NAMESPACE
#               valueFrom:
#                 fieldRef:
#                   fieldPath: metadata.namespace
#           securityContext: 
#             allowPrivilegeEscalation: false
#             capabilities:
#               drop:
#               - ALL
#             readOnlyRootFilesystem: true
#             runAsNonRoot: true
#             runAsUser: 65532
#             seccompProfile:
#               type: RuntimeDefault
#       restartPolicy: OnFailure
#       serviceAccountName: ingress-nginx-admission
#       nodeSelector: 
#         kubernetes.io/os: linux

apiVersion: v1
kind: Namespace
metadata:
  labels:
    app.kubernetes.io/instance: ingress-nginx
    app.kubernetes.io/name: ingress-nginx
  name: ingress-nginx
---
apiVersion: v1
automountServiceAccountToken: true
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/component: controller
    app.kubernetes.io/instance: ingress-nginx
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/version: 1.8.1
  name: ingress-nginx
  namespace: ingress-nginx
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/component: admission-webhook
    app.kubernetes.io/instance: ingress-nginx
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/version: 1.8.1
  name: ingress-nginx-admission
  namespace: ingress-nginx
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app.kubernetes.io/component: controller
    app.kubernetes.io/instance: ingress-nginx
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/version: 1.8.1
  name: ingress-nginx
  namespace: ingress-nginx
rules:
- apiGroups:
  - ""
  resources:
  - namespaces
  verbs:
  - get
- apiGroups:
  - ""
  resources:
  - configmaps
  - pods
  - secrets
  - endpoints
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - networking.k8s.io
  resources:
  - ingresses
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - networking.k8s.io
  resources:
  - ingresses/status
  verbs:
  - update
- apiGroups:
  - networking.k8s.io
  resources:
  - ingressclasses
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - coordination.k8s.io
  resourceNames:
  - ingress-nginx-leader
  resources:
  - leases
  verbs:
  - get
  - update
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - create
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - list
  - watch
  - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app.kubernetes.io/component: admission-webhook
    app.kubernetes.io/instance: ingress-nginx
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/version: 1.8.1
  name: ingress-nginx-admission
  namespace: ingress-nginx
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - create
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/instance: ingress-nginx
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/version: 1.8.1
  name: ingress-nginx
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  - endpoints
  - nodes
  - pods
  - secrets
  - namespaces
  verbs:
  - list
  - watch
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - get
- apiGroups:
  - ""
  resources:
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - networking.k8s.io
  resources:
  - ingresses
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
- apiGroups:
  - networking.k8s.io
  resources:
  - ingresses/status
  verbs:
  - update
- apiGroups:
  - networking.k8s.io
  resources:
  - ingressclasses
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - list
  - watch
  - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/component: admission-webhook
    app.kubernetes.io/instance: ingress-nginx
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/version: 1.8.1
  name: ingress-nginx-admission
rules:
- apiGroups:
  - admissionregistration.k8s.io
  resources:
  - validatingwebhookconfigurations
  verbs:
  - get
  - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app.kubernetes.io/component: controller
    app.kubernetes.io/instance: ingress-nginx
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/version: 1.8.1
  name: ingress-nginx
  namespace: ingress-nginx
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: ingress-nginx
subjects:
- kind: ServiceAccount
  name: ingress-nginx
  namespace: ingress-nginx
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app.kubernetes.io/component: admission-webhook
    app.kubernetes.io/instance: ingress-nginx
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/version: 1.8.1
  name: ingress-nginx-admission
  namespace: ingress-nginx
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: ingress-nginx-admission
subjects:
- kind: ServiceAccount
  name: ingress-nginx-admission
  namespace: ingress-nginx
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/instance: ingress-nginx
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/version: 1.8.1
  name: ingress-nginx
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: ingress-nginx
subjects:
- kind: ServiceAccount
  name: ingress-nginx
  namespace: ingress-nginx
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/component: admission-webhook
    app.kubernetes.io/instance: ingress-nginx
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/version: 1.8.1
  name: ingress-nginx-admission
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: ingress-nginx-admission
subjects:
- kind: ServiceAccount
  name: ingress-nginx-admission
  namespace: ingress-nginx
---
apiVersion: v1
data:
  allow-snippet-annotations: "true"
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/component: controller
    app.kubernetes.io/instance: ingress-nginx
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/version: 1.8.1
  name: ingress-nginx-controller
  namespace: ingress-nginx
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: controller
    app.kubernetes.io/instance: ingress-nginx
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/version: 1.8.1
  name: ingress-nginx-controller
  namespace: ingress-nginx
spec:
  externalTrafficPolicy: Local
  ipFamilies:
  - IPv4
  ipFamilyPolicy: SingleStack
  ports:
  - appProtocol: http
    name: http
    port: 80
    protocol: TCP
    targetPort: http
  - appProtocol: https
    name: https
    port: 443
    protocol: TCP
    targetPort: https
  selector:
    app.kubernetes.io/component: controller
    app.kubernetes.io/instance: ingress-nginx
    app.kubernetes.io/name: ingress-nginx
  type: LoadBalancer
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: controller
    app.kubernetes.io/instance: ingress-nginx
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/version: 1.8.1
  name: ingress-nginx-controller-admission
  namespace: ingress-nginx
spec:
  ports:
  - appProtocol: https
    name: https-webhook
    port: 443
    targetPort: webhook
  selector:
    app.kubernetes.io/component: controller
    app.kubernetes.io/instance: ingress-nginx
    app.kubernetes.io/name: ingress-nginx
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: controller
    app.kubernetes.io/instance: ingress-nginx
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/version: 1.8.1
  name: ingress-nginx-controller
  namespace: ingress-nginx
spec:
  minReadySeconds: 0
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: ingress-nginx
      app.kubernetes.io/name: ingress-nginx
  template:
    metadata:
      labels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: ingress-nginx
        app.kubernetes.io/name: ingress-nginx
        app.kubernetes.io/part-of: ingress-nginx
        app.kubernetes.io/version: 1.8.1
    spec:
      containers:
      - args:
        - /nginx-ingress-controller
        - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
        - --election-id=ingress-nginx-leader
        - --controller-class=k8s.io/ingress-nginx
        - --ingress-class=nginx
        - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
        - --validating-webhook=:8443
        - --validating-webhook-certificate=/usr/local/certificates/cert
        - --validating-webhook-key=/usr/local/certificates/key
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: LD_PRELOAD
          value: /usr/local/lib/libmimalloc.so
        image: registry.k8s.io/ingress-nginx/controller:v1.8.1@sha256:e5c4824e7375fcf2a393e1c03c293b69759af37a9ca6abdb91b13d78a93da8bd
        imagePullPolicy: IfNotPresent
        lifecycle:
          preStop:
            exec:
              command:
              - /wait-shutdown
        livenessProbe:
          failureThreshold: 5
          httpGet:
            path: /healthz
            port: 10254
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        name: controller
        ports:
        - containerPort: 80
          name: http
          protocol: TCP
        - containerPort: 443
          name: https
          protocol: TCP
        - containerPort: 8443
          name: webhook
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /healthz
            port: 10254
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        resources:
          requests:
            cpu: 100m
            memory: 90Mi
        securityContext:
          allowPrivilegeEscalation: true
          capabilities:
            add:
            - NET_BIND_SERVICE
            drop:
            - ALL
          runAsUser: 101
        volumeMounts:
        - mountPath: /usr/local/certificates/
          name: webhook-cert
          readOnly: true
      dnsPolicy: ClusterFirst
      nodeSelector:
        kubernetes.io/os: linux
      serviceAccountName: ingress-nginx
      terminationGracePeriodSeconds: 300
      volumes:
      - name: webhook-cert
        secret:
          secretName: ingress-nginx-admission
---
apiVersion: batch/v1
kind: Job
metadata:
  labels:
    app.kubernetes.io/component: admission-webhook
    app.kubernetes.io/instance: ingress-nginx
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/version: 1.8.1
  name: ingress-nginx-admission-create
  namespace: ingress-nginx
spec:
  template:
    metadata:
      labels:
        app.kubernetes.io/component: admission-webhook
        app.kubernetes.io/instance: ingress-nginx
        app.kubernetes.io/name: ingress-nginx
        app.kubernetes.io/part-of: ingress-nginx
        app.kubernetes.io/version: 1.8.1
      name: ingress-nginx-admission-create
    spec:
      containers:
      - args:
        - create
        - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
        - --namespace=$(POD_NAMESPACE)
        - --secret-name=ingress-nginx-admission
        env:
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        image: registry.k8s.io/ingress-nginx/kube-webhook-certgen:v20230407@sha256:543c40fd093964bc9ab509d3e791f9989963021f1e9e4c9c7b6700b02bfb227b
        imagePullPolicy: IfNotPresent
        name: create
        securityContext:
          allowPrivilegeEscalation: false
      nodeSelector:
        kubernetes.io/os: linux
      restartPolicy: OnFailure
      securityContext:
        fsGroup: 2000
        runAsNonRoot: true
        runAsUser: 2000
      serviceAccountName: ingress-nginx-admission
---
apiVersion: batch/v1
kind: Job
metadata:
  labels:
    app.kubernetes.io/component: admission-webhook
    app.kubernetes.io/instance: ingress-nginx
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/version: 1.8.1
  name: ingress-nginx-admission-patch
  namespace: ingress-nginx
spec:
  template:
    metadata:
      labels:
        app.kubernetes.io/component: admission-webhook
        app.kubernetes.io/instance: ingress-nginx
        app.kubernetes.io/name: ingress-nginx
        app.kubernetes.io/part-of: ingress-nginx
        app.kubernetes.io/version: 1.8.1
      name: ingress-nginx-admission-patch
    spec:
      containers:
      - args:
        - patch
        - --webhook-name=ingress-nginx-admission
        - --namespace=$(POD_NAMESPACE)
        - --patch-mutating=false
        - --secret-name=ingress-nginx-admission
        - --patch-failure-policy=Fail
        env:
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        image: registry.k8s.io/ingress-nginx/kube-webhook-certgen:v20230407@sha256:543c40fd093964bc9ab509d3e791f9989963021f1e9e4c9c7b6700b02bfb227b
        imagePullPolicy: IfNotPresent
        name: patch
        securityContext:
          allowPrivilegeEscalation: false
      nodeSelector:
        kubernetes.io/os: linux
      restartPolicy: OnFailure
      securityContext:
        fsGroup: 2000
        runAsNonRoot: true
        runAsUser: 2000
      serviceAccountName: ingress-nginx-admission
---
apiVersion: networking.k8s.io/v1
kind: IngressClass
metadata:
  labels:
    app.kubernetes.io/component: controller
    app.kubernetes.io/instance: ingress-nginx
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/version: 1.8.1
  name: nginx
spec:
  controller: k8s.io/ingress-nginx
---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  labels:
    app.kubernetes.io/component: admission-webhook
    app.kubernetes.io/instance: ingress-nginx
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/version: 1.8.1
  name: ingress-nginx-admission
webhooks:
- admissionReviewVersions:
  - v1
  clientConfig:
    service:
      name: ingress-nginx-controller-admission
      namespace: ingress-nginx
      path: /networking/v1/ingresses
  failurePolicy: Fail
  matchPolicy: Equivalent
  name: validate.nginx.ingress.kubernetes.io
  rules:
  - apiGroups:
    - networking.k8s.io
    apiVersions:
    - v1
    operations:
    - CREATE
    - UPDATE
    resources:
    - ingresses
  sideEffects: None